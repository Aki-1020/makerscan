{% extends 'layout.twig' %}

{% block body %}



<div class="sc-qYsuA bKtdyT">
  <div class="sc-pCPXO cJZrlO">
    <div class="sc-fzqMdD fRMNNm">
      <div class="sc-fzowVh fwdcsh">
        <h1 class="sc-fzoJus edWbko">Address &nbsp; <span style="font-size:17px;">{{ accountInfo.address }} <i data-clipboard-text="{{ accountInfo.address }}" class="fa-solid fa-copy tooltip" title="Copied" style="color: #3498db; cursor: pointer;"></i></span></h1>
      
		<div class="sc-ptDSg bvjSz" style="max-width: 50%; margin-left: auto; margin-right: 0px; max-height: 40px; align-self: center;">
			<input id="searchval" class="sc-qXRQq jonqnN" placeholder=" Search ...   blockheight, blockhash, transaction id, address" /><button id="dosearch" class="sc-pAncQ gPjSHN">Search</button>
		</div>
      
      </div>

      <div class="sc-fzokvW iuWQNm">
        <div class="sc-fzqzlV eoCMvb">
        
          <div style="display:flex; flex-direction: row;">
          
          	<div style="flex:1; background-color: #fff; border-radius:5px; margin:7px;">

				<div style="border-bottom: 0.5px solid #e7eaf3; display:flex; flex-direction:row;">
					<div style="flex:1; padding:15px;">Balance:</div>
					<div style="flex:3; padding:15px;" >{{ accountInfo.balanceFormatted }} PDN</div>
				</div>

				<div style="border-bottom: 0.5px solid #e7eaf3; display:flex; flex-direction:row;">
					<div style="flex:1; padding:15px;">Account Value:</div>
					<div style="flex:3; padding:15px;" >${{ accountInfo.balanceValue }}</div>
				</div>
				
				<div style="border-bottom: 0.5px solid #e7eaf3; display:flex; flex-direction:row;">
					<div style="flex:1; padding:15px;">Label:</div>
					<div style="flex:3; padding:15px;" >{{ accountInfo.label }}</div>
				</div>

				<div style="display:flex; flex-direction:row;">
					<div style="flex:1; padding:15px;">Tokens:</div>
					<div style="flex:3; padding:15px;" >N/A</div>
				</div>

          	</div>
          	<div style="flex:1; background-color: #fff; border-radius:5px; margin:7px;">
          	


				<div style="border-bottom: 0.5px solid #e7eaf3; display:flex; flex-direction:row;">
					<div style="flex:1; padding:15px;"># Txs:</div>
					<div style="flex:3; padding:15px;" >{{ accountInfo.txcount }}</div>
				</div>
				
				<div style="border-bottom: 0.5px solid #e7eaf3; display:flex; flex-direction:row;">
					<div style="flex:1; padding:15px;">First Seen:</div>
					<div style="flex:3; padding:15px;" id='timestamp'>{{ accountInfo.firstSeenAt }}</div>
				</div>

				<div style="border-bottom: 0.5px solid #e7eaf3; display:flex; flex-direction:row;">
					<div style="flex:1; padding:15px;">Last Seen:</div>
					<div style="flex:3; padding:15px;" id='timestamp2'>{{ accountInfo.lastSeenAt }}</div>
				</div>
				<div style="display:flex; flex-direction:row;">
					<div style="flex:1; padding:15px;">Blocks Mined:</div>
					<div style="flex:3; padding:15px;">{{ accountInfo.blocksMined }}</div>
				</div>
				
          	</div>

          </div>
          
        
          <div id="datatable"></div>
          
        </div>
      </div>
    </div>
  </div>
</div>


{% endblock %}
{% block javascripts %}
<script>

$(document).ready(function() {

	$('#dosearch').on('click', function() {
	
		let searchVal = $('#searchval').val();

		$('#dosearch').html('<i class="fa fa-spinner fa-spin" aria-hidden="true"></i>');

		socket.emit('doSearch', searchVal, function(data) {
		
			location.href = data.redirect;
		
		});
	
	});

	$('#searchval').on('keypress', function (e) {
   
		if(e.which === 13){
         	
			let searchVal = $('#searchval').val();

			$('#dosearch').html('<i class="fa fa-spinner fa-spin" aria-hidden="true"></i>');

			socket.emit('doSearch', searchVal, function(data) {
					
				location.href = data.redirect;
		
			});
		
		}
	
	});

	let queueReload = false;

	const grid = new gridjs.Grid({
	  columns: [
		{ 
		  name: "Transaction ID",
		  attributes: {
			style: {
				width: '20%',
				'text-align': "left",
				overflow: 'hidden',
    			'text-overflow': 'ellipsis'
			}
		  }
		},
		{ 
		  name: "Method",
		  attributes: {
			style: {
				width: '100px',
				"padding-left": "8px",
				"padding-top": "0px",
				"padding-bottom": "0px",
				'text-align': "center"
			}
		  }
		},
		{ 
		  name: "Block",
		  attributes: {
			style: {
				width: '110px',
				'text-align': "right"
			}
		  }
		},
		{ 
		  name: "Age",
		  attributes: {
			style: {
				width: '140px',
				'text-align': "right"
			}
		  }
		},
		{ 
		  name: "From",
		  attributes: {
			style: {
				width: '20%',
				overflow: "hidden",
				'text-align': "right",
				overflow: 'hidden',
    			'text-overflow': 'ellipsis'
			}
		  }
		},
		{ 
		  name: ".",
		  attributes: {
			style: {
				width: '55px',
				"padding-left": "8px",
				"padding-top": "0px",
				"padding-bottom": "0px",
				'text-align': "center"
			}
		  }
		},
		{ 
		  name: "To",
		  attributes: {
			style: {
				width: '20%',
				'text-align': "right",
				overflow: 'hidden',
    			'text-overflow': 'ellipsis'
			}
		  }
		},
		{ 
		  name: "Value PDN",
		  attributes: {
			style: {
				width: '130px',
				'text-align': "right"
			}
		  }
		},
		{ 
		  name: "Fee PDN",
		  attributes: {
			style: {
				width: '120px',
				'text-align': "right"
			}
		  }
		}
	  ],
	  autoWidth: false,
	  pagination: {
		limit: 20,
		server: {
		  url: (prev, page, limit) => JSON.stringify({
		  	offset: (page * limit),
		  	limit: limit,
		  	accountId: '{{ accountId }}'
		  })
		}
	  },
	  language: {
		'pagination': {
		  'previous': '<<',
		  'next': '>>'
		}
	  },
	  style: { 
		table: { 
		  'white-space': 'nowrap'
		}
	  },
	  server: {
		url: JSON.stringify({
			offset: 0,
			limit: 20,
			accountId: '{{ accountId }}'
		}),
		data: (opts) => {
			return new Promise((resolve, reject) => {

				socket.emit("getTransactions", JSON.parse(opts.url), function(result) {

					if (result)
					{
					
						resolve({
							data: result.results.map(tx => [
								gridjs.html(`<a style="color: #3498db; cursor: pointer;" href="/tx/` + tx.transactionId + `">` + tx.transactionId + `</a>`),
								gridjs.html(`<span style="min-width:68px;" class="methodlabel">` + tx.method + `</span>`),
								gridjs.html(`<a style="color: #3498db; cursor: pointer;" href="/block/` + tx.blockId + `">` + tx.blockId + `</a>`),
								gridjs.html(timeAgo(tx.timestamp*1000)),
								gridjs.html((tx.isGenerate?`New Coins`:`<a style="color: #3498db; cursor: pointer;" href="/account/` + tx.fromAccount + `">` + tx.fromAccount + `</a>`)),
								
								gridjs.html(tx.toAccount=="{{ accountInfo.address }}"?`<span style="width:40px;" class="inlabel">IN</span>`:`<span style="width:40px;" class="outlabel">OUT</span>`),

								gridjs.html(`<a style="color: #3498db; cursor: pointer;" href="/account/` + tx.toAccount + `">` + tx.toAccount + `</a>`),
								gridjs.html(tx.amount),
								gridjs.html(tx.fee)
							]),
							total: result.total
						});

					}
					else
					{
						resolve({
							data: [],
							total: 0
						});
					}
					
				});

			});
		}
	  }
	}).render(document.getElementById("datatable"));



	var clipboard = new ClipboardJS('.fa-copy');

	$('.fa-copy').tooltipster({
	   animation: 'fade',
	   delay: 200,
	   trigger: 'custom',
	   triggerOpen: {
			click: true
	   },
	   triggerClose: {
			mouseleave: true
	   }
	});
	
	clipboard.on('success', function(e) {
		


	});

	let timestamp = parseInt($('#timestamp').html()) * 1000;

	$('#timestamp').html(timeAgo(timestamp) + ' (' + new Date(timestamp).toUTCString() + ')')

	let timestamp2 = parseInt($('#timestamp2').html()) * 1000;

	$('#timestamp2').html(timeAgo(timestamp2) + ' (' + new Date(timestamp2).toUTCString() + ')')

  	
});    

function timeAgo(timestamp) {
  const seconds = Math.floor((new Date() - timestamp) / 1000);

  const intervals = {
    year: 31536000,
    month: 2592000,
    week: 604800,
    day: 86400,
    hour: 3600,
    minute: 60,
    second: 1
  };

  for (const [key, value] of Object.entries(intervals)) {
    const interval = Math.floor(seconds / value);
    if (interval >= 1) {
      return `${interval} ${key}${interval > 1 ? 's' : ''} ago`;
    }
  }

  return 'just now';
}

function sigfig(num, sigfigs_opt) {
	// Set default sigfigs to 3
	sigfigs_opt = (typeof sigfigs_opt === "undefined") ? 3 : sigfigs_opt;
	// Only assigns sig figs and suffixes for numbers > 1
	if (num <= 1) return num.toPrecision(sigfigs_opt);
	// Calculate for numbers > 1
	var power10 = log10(num);
	var power10ceiling = Math.floor(power10) + 1;
	// 0 = '', 1 = 'K', 2 = 'M', 3 = 'B', 4 = 'T'
	var SUFFIXES = ['H/s', 'kH/s', 'MH/s', 'GH/s', 'TH/s', 'PH/s'];
	// 100: power10 = 2, suffixNum = 0, suffix = ''
	// 1000: power10 = 3, suffixNum = 1, suffix = 'K'
	var suffixNum = Math.floor(power10 / 3);
	var suffix = SUFFIXES[suffixNum];
	// Would be 1 for '', 1000 for 'K', 1000000 for 'M', etc.
	var suffixPower10 = Math.pow(10, suffixNum * 3);
	var base = num / suffixPower10;
	var baseRound = base.toPrecision(sigfigs_opt);
	return baseRound + suffix;
}

function log10(num) {
	  // Per http://stackoverflow.com/questions/3019278/how-can-i-specify-the-base-for-math-log-in-javascript#comment29970629_16868744
	  // Handles floating-point errors log10(1000) otherwise fails at (2.99999996)
	  return (Math.round(Math.log(num) / Math.LN10 * 1e6) / 1e6);
}

function addCommas(nStr){
    nStr += '';
    c = nStr.split(','); // Split the result on commas
    nStr = c.join('');  // Make it back to a string without the commas
    x = nStr.split('.');
    x1 = x[0];
    x2 = x.length > 1 ? '.' + x[1] : '';
    var rgx = /(\d+)(\d{3})/;
    while (rgx.test(x1)) {
        x1 = x1.replace(rgx, '$1' + ',' + '$2');
    }
    return x1 + x2;
}

</script>
{% endblock %}


